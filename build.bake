import System
import System.Reflection
import System.IO
import System.Linq.Enumerable
import System.Xml.Linq
import System.Xml.XPath.Extensions from System.Xml.Linq
import System.ComponentModel
import System.Runtime.InteropServices
import System.Security.Principal

[DllImport("advapi32.dll", SetLastError: true, CharSet: CharSet.Unicode)]
def LogonUser(lpszUsername as String, lpszDomain as String, lpszPassword as String, dwLogonType as int, dwLogonProvider as int, ref phToken as IntPtr) as bool:
	pass

[DllImport("kernel32.dll", CharSet: CharSet.Auto)]
def CloseHandle(handle as IntPtr) as bool:
	pass

def Impersonate(action as Action):
	user = Ask("user: ")
	password = Ask("password: ")

	LOGON32_PROVIDER_DEFAULT = 0
	LOGON32_LOGON_INTERACTIVE = 2
	tokenHandle = IntPtr.Zero

	if not LogonUser(user, "", password, LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT, tokenHandle):
		raise Win32Exception()

	using WindowsIdentity.Impersonate(tokenHandle):
		try:
			action()
		ensure:
			CloseHandle(tokenHandle)

Global(
	Project : "AdminInterface",
	DeployAlias : "FutureAdm",
	HumanReadableName : "Административный интерфейс",
	AdditionalAssemblies : ("Common.Web.UI",)
)

#если мы запускаем тесты на сервере не надо загружать проект что бы
#не блокировать библиотеки
task @ready:
	unless Configuration.IsDefined(@notInteractive):
		Engine.Execute("LoadProject")

task @default, [@Build]

task @Build, [@BuildWebSite, @BuildBackground, @BuildPrinter]

task @BuildPrinter:
	oldProject = Globals.Project
	Globals.Project = @Printer
	project = @Printer
	Engine.Tasks.First({t| t.Name == "BuildApp"}).Executed = false
	Engine.Execute("BuildApp")
	Cp("src/$project/app.release.config", "output/$project/$project.config", true)
	Cp("lib/Chrome.Printer/bin/*", "output/$project/", true)
	Rm("output/$project/_PublishedWebsites", true)
	Globals.Project = oldProject

task @DeployPrinter:
	return if Globals.Environment == @Test

	Globals.Project = @Printer
	Globals.DeployTo = """\\adc.analit.net\Inforoom\Apps\Printer"""
	Engine.Tasks.First({t| t.Name == "WebDeploy"}).Executed = false
	Engine.Execute("WebDeploy")

task @DeployBackground, [@BuildBackground]:
	return if Globals.Environment == @Test

	Globals.Project = "AdminInterface.Background"
	Globals.DeployTo = """\\fms\TopShelf\Services\""" + Globals.Project
	Engine.Tasks.First({t| t.Name == "WebDeploy"}).Executed = false
	Engine.Execute("WebDeploy")

task @BuildBackground:
	oldProject = Globals.Project
	Globals.Project = "AdminInterface.Background"
	project = "AdminInterface.Background"
	Engine.Tasks.First({t| t.Name == "BuildApp"}).Executed = false
	Engine.Execute("BuildApp")
	Rm("output/$project/_PublishedWebsites", true)
	Cp("src/$project/app.release.config", "output/$project/$project.config")
	Rm("output/$project/$project.*.config")
	Globals.Project = oldProject

task @DeployApp, [@WebDeploy, @DeployBackground]

task @deploy, [@DeployPipeline]

task @FindIntruders:
	Impersonate:
		for record in Db.Read("select * from Future.Addresses"):
			source = """\\adc.analit.net\Inforoom\FTP\OptBox\""" + record.Id
			destination = """\\adc.analit.net\Inforoom\AptBox\""" + record.Id
			if Directory.Exists(source):
				print record.Id
				orderFiles = Path.Combine(source, "Orders")
				reportFiles = Path.Combine(source, "Reports")
				if Directory.Exists(reportFiles) and Directory.GetFiles(reportFiles).Length > 0:
					print "skip $source"
					continue
				if Directory.Exists(orderFiles) and Directory.GetFiles(orderFiles).Length > 0:
					print "skip $source"
					continue
				files = FileSet("**.*", BaseDirectory: source).Files
				for file in files:
					fileName = Path.GetFileName(file)
					id = fileName[:fileName.IndexOf("_")]
					dir = Path.GetFileName(Path.GetDirectoryName(file))
					destFile = Path.Combine(destination, dir, fileName)
					Db.Execute("update logs.DocumentSendLogs set Committed = 0, UpdateId = null where DocumentId = $id")
					print "id = $id"
					print "copy from $file $destFile"
					File.Copy(file, destFile, true)

task @CleanFtp:
	root = """\\adc.analit.net\Inforoom\FTP\OptBox\"""
	Impersonate:
		ids = Db.Read("select * from Future.Suppliers").Select({r| Convert.ToUInt32(r.Id)}).ToList()
		for dir in Directory.GetDirectories(root):
			id = Convert.ToUInt32(Path.GetFileName(dir))
			if not ids.Any({i| id == i}):
				#print "delete $dir"
				Directory.Delete(dir, true)

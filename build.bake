import file from WebSiteSupport.bake
import file from Deploy.bake
import file from Lib.bake
import file from Migration.bake
import file from Tools.bake
import file from Test.bake
import file from AppSupport.bake
import file from Tools.boo
import file from Db.bake
import System
import System.Reflection
import System.IO
import System.Linq.Enumerable
import System.Xml.Linq
import System.Xml.XPath.Extensions from System.Xml.Linq
import System.ComponentModel
import System.Runtime.InteropServices
import System.Security.Principal
import file from Db.boo
import file from DbShell.bake

[DllImport("advapi32.dll", SetLastError: true, CharSet: CharSet.Unicode)]
def LogonUser(lpszUsername as String, lpszDomain as String, lpszPassword as String, dwLogonType as int, dwLogonProvider as int, ref phToken as IntPtr) as bool:
	pass

[DllImport("kernel32.dll", CharSet: CharSet.Auto)]
def CloseHandle(handle as IntPtr) as bool:
	pass

def Impersonate(action as Action):
	Console.Write("user: ")
	user = Console.ReadLine()
	Console.Write("password: ")
	password = Console.ReadLine()

	LOGON32_PROVIDER_DEFAULT = 0;
	LOGON32_LOGON_INTERACTIVE = 2;
	tokenHandle = IntPtr.Zero;

	if not LogonUser(user, "", password, LOGON32_LOGON_INTERACTIVE, LOGON32_PROVIDER_DEFAULT, tokenHandle):
		raise Win32Exception()

	using WindowsIdentity.Impersonate(tokenHandle):
		try:
			action()
		ensure:
			CloseHandle(tokenHandle);

Global(
	Project : "AdminInterface",
	DeployAlias : "FutureAdm",
	HumanReadableName : "Административный интерфейс (Новая реальность)",
	AdditionalAssemblies : ("Common.Web.UI",)
)

Engine.Execute("LoadProject")

task @default, [@Build]

task @Build, [@BuildWebSite, @BuildBackground]

task @BuildFull, [@Build, @BuildPrinter]

task @BuildPrinter:
	oldProject = Globals.Project
	Globals.Project = @Printer
	project = @Printer
	Engine.Tasks.First({t| t.Name == "BuildApp"}).Executed = false
	Engine.Execute("BuildApp")
	config = "output/$project/$project.exe.config"
	doc = XDocument.Load(config)
	doc.XPathSelectElement("//appSettings/add[@key=\"User\"]").Add(XAttribute("value", Ask("user for acdcserv:")))
	doc.XPathSelectElement("//appSettings/add[@key=\"Password\"]").Add(XAttribute("value", Ask("password:")))
	doc.Save(config)
	Globals.Project = oldProject
	Rm("output/Printer/_PublishedWebsites", true)

task @DeployPrinter:
	Globals.Project = @Printer
	Globals.DeployTo = """\\adc.analit.net\Inforoom\Apps\Printer"""
	Engine.Tasks.First({t| t.Name == "WebDeploy"}).Executed = false
	Engine.Execute("WebDeploy")

task @DeployBackground, [@BuildBackground]:
	Globals.Project = "AdminInterface.Background"
	Globals.DeployTo = """\\fms\TopShelf\Services\""" + Globals.Project
	Engine.Tasks.First({t| t.Name == "WebDeploy"}).Executed = false
	Engine.Execute("WebDeploy")

task @BuildBackground:
	oldProject = Globals.Project
	Globals.Project = "AdminInterface.Background"
	project = "AdminInterface.Background"
	Engine.Tasks.First({t| t.Name == "BuildApp"}).Executed = false
	Engine.Execute("BuildApp")
	Rm("output/$project/_PublishedWebsites", true)
	Cp("src/$project/app.release.config", "output/$project/$project.config")
	Rm("output/$project/$project.*.config")
	Globals.Project = oldProject

task @deploy, [@Production, @Build, @Backup, @Migrate, @WebDeploy, @DeployBackground, @SendDeployNotification]

task @FullDeploy, [@Production, @BuildFull, @Backup, @Migrate, @WebDeploy, @DeployPrinter,/* @DeployBackground,*/ @SendDeployNotification]

task @FindIntruders:
	Impersonate:
		for record in Db.Read("select * from Future.Addresses"):
			source = """\\adc.analit.net\Inforoom\FTP\OptBox\""" + record.Id
			destination = """\\adc.analit.net\Inforoom\AptBox\""" + record.Id
			if Directory.Exists(source):
				print record.Id
				orderFiles = Path.Combine(source, "Orders")
				reportFiles = Path.Combine(source, "Reports")
				if Directory.Exists(reportFiles) and Directory.GetFiles(reportFiles).Length > 0:
					print "skip $source"
					continue
				if Directory.Exists(orderFiles) and Directory.GetFiles(orderFiles).Length > 0:
					print "skip $source"
					continue
				files = FileSet("**.*", BaseDirectory: source).Files
				for file in files:
					fileName = Path.GetFileName(file)
					id = fileName[:fileName.IndexOf("_")]
					dir = Path.GetFileName(Path.GetDirectoryName(file))
					destFile = Path.Combine(destination, dir, fileName)
					Db.Execute("update logs.DocumentSendLogs set Committed = 0, UpdateId = null where DocumentId = $id")
					print "id = $id"
					print "copy from $file $destFile"
					File.Copy(file, destFile, true)

task @CleanFtp:
	root = """\\adc.analit.net\Inforoom\FTP\OptBox\"""
	Impersonate:
		ids = Db.Read("select * from Future.Suppliers").Select({r| Convert.ToUInt32(r.Id)}).ToList()
		for dir in Directory.GetDirectories(root):
			id = Convert.ToUInt32(Path.GetFileName(dir))
			if not ids.Any({i| id == i}):
				#print "delete $dir"
				Directory.Delete(dir, true)

task @TestJs:
	root = Path.GetFullPath("tools/phantomjs-1.2.0")
	phantom = Path.Combine(root, "phantomjs.exe")
	run = Path.Combine(root, "examples", "run-qunit.js")
	for file in Directory.GetFiles("test", "*.html"):
		Sh("$phantom $run $file")

task @GenerateJsTest:
	testFile = Configuration.file
	test = Configuration.Maybe.test
	script = Configuration.Maybe.script

	scriptRoot = "../src/AdminInterface/Assets/JavaScript/"
	script = testFile + ".js" unless script
	type = "text/coffeescript"
	testFile += ".html"
	template = """<html>
	<head>
			<meta http-equiv="content-type" content="text/html; charset=UTF-8">
			<script src="http://code.jquery.com/jquery-latest.js"></script>
			<script src="http://code.jquery.com/qunit/git/qunit.js"></script>
			<script src="../src/AdminInterface/JavaScript/coffee-script.js"></script>
			<script type="$type" src="$script"></script>
			<link rel="stylesheet" href="http://code.jquery.com/qunit/git/qunit.css"></link>
	</head>
	<body>
		<script type="text/coffeescript">
			$ ->
				test "$test", ->
					ok false, "напиши меня"
		</script>
		<h1 id="qunit-header">QUnit example</h1>
		<h2 id="qunit-banner"></h2>
		<div id="qunit-testrunner-toolbar"></div>
		<h2 id="qunit-userAgent"></h2>
		<ol id="qunit-tests"></ol>
		<div id="qunit-fixture">test markup, will be hidden</div>
	</body>

</html>"""
	testRoot = "test" 
	testFile = Path.Combine(testRoot, testFile)
	File.WriteAllText(testFile, template)
	print "create $testFile"
	

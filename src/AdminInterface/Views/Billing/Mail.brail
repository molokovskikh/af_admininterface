<%
def Select() as string:
	result = "<select name='Instance.Recipient.Id'>" + "<option></option>"
	for recipient in Recipients:
		selected = ""
		if Instance.Recipient and Instance.Recipient.Id == recipient.Id:
			selected = "selected"
		end
		result += "<option ${selected} value=${recipient.Id}>"
		result += recipient.Name
		result += "</option>"
	end
	result += "</select>"
	return result
end
%>

<% def WriteInputGroupHeader(localHeader as string) as string: %>
	<tr>
		<td class="InputGroupHeader" colspan="2">
			${localHeader}
		</td>
	</tr>
<% end %>

<% def WriteLabelAndEditControle(labelText as string, editControlText as string) as string: %>
	<tr>
		<td style="width: 30%">
			${labelText}
		</td>
		<td class="BillingInput">
			${editControlText}
		</td>
	</tr>
<% end %>

<div class="left">
	<form action="update.rails" method="post">
		${FormHelper.HiddenField("ClientCode", Client.Id)}
		${FormHelper.HiddenField("Instance.PayerID")}
		${FormHelper.HiddenField("tab", "mail")}
		
	<table>
		${WriteInputGroupHeader("Общая информация")}

		${WriteLabelAndEditControle(
			FormHelper.LabelFor("Instance.ShortName", "Краткое наименование:"), 
			FormHelper.TextField("Instance.ShortName"))}

		${WriteLabelAndEditControle(
			FormHelper.LabelFor("Instance.JuridicalName", "Полное наименование:"), 
			FormHelper.TextField("Instance.JuridicalName"))}

		${WriteLabelAndEditControle(
			FormHelper.LabelFor("Instance.JuridicalAddress", "Юридический адрес:"), 
			FormHelper.TextField("Instance.JuridicalAddress"))}

		${WriteLabelAndEditControle(
			FormHelper.LabelFor("Instance.JuridicalAddress", "Адрес получателя:"), 
			FormHelper.TextField("Instance.ReceiverAddress"))}

		${WriteLabelAndEditControle(
			FormHelper.LabelFor("Instance.INN", "ИНН:"),
			FormHelper.TextField("Instance.INN"))}

		${WriteLabelAndEditControle(
			FormHelper.LabelFor("Instance.KPP", "КПП:"),
			FormHelper.TextField("Instance.KPP"))}

		${WriteLabelAndEditControle(
			FormHelper.LabelFor("Instance.Recipient", "Получатель платежей"),
			Select())}

		<%
		contactGroupIndex = 0
		component ContactViewer, {"ContactGroups" : Instance.ContactGroupOwner.ContactGroups}:
			section ContactGroupHeader:
		%>
			<tr>
				<% if contactGroupIndex == 0: %>
					<td class="InputGroupHeader">
						<a href="../Contact/NewContactGroup.rails?billingCode=${Instance.PayerID}" target="_blank">Добавить группу контактной информации</a>
					</td>
					<td class="InputGroupHeader">
						${ContactGroupName}
					</td>
				<% else: %>
					<td class="InputGroupHeader" colspan="2">
						${ContactGroupName}
					</td>
				<% end %>
			</tr>
		<% 
				contactGroupIndex++;
			end
			section Item:
			%>
				<tr>
					<td>
						${Label}:
					</td>
					<td>
					${Value}
					</td>
				</tr>
			<% 
			end
			section Person:
			%>
				<a href='../Contact/EditPerson.rails?personId=${PersonId}' target='_blank'>${PersonName}</a>
			<%
			end
			section ContactGroupHeaderLink:
			%>
				<a href='../Contact/EditContactGroup.rails?contactGroupId=${ContactGroupId}' target="_blank" >${ContactGroupName}</a>
			<%
			end
		end
		%>
	
		${WriteInputGroupHeader("Отправка корреспонденции")}
		
		${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.HaveContract", 
														"Договор получен:"), 
									FormHelper.CheckboxField("Instance.HaveContract"))}
									
		${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.SendRegisteredLetter", 
														"Отправлять заказным письмом:"), 
									FormHelper.CheckboxField("Instance.SendRegisteredLetter"))}
									
		${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.SendScannedDocuments", 
														"Отправлять отсканированные документы:"), 
									FormHelper.CheckboxField("Instance.SendScannedDocuments"))}
									
		${WriteInputGroupHeader("Доставка корреспонденции")}

		${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.ActualAddressCountry", 
														"Страна:"), 
									FormHelper.TextField("Instance.ActualAddressCountry", {"class" : "BillingInput"}))}
												
		${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.ActualAddressIndex", 
														"Индекс:"), 
									FormHelper.TextField("Instance.ActualAddressIndex", {"class" : "BillingInput"}))}
												
		${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.ActualAddressProvince", 
														"Область:"), 
									FormHelper.TextField("Instance.ActualAddressProvince", {"class" : "BillingInput"}))}
												
		${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.ActualAddressTown", 
														"Город:"), 
									FormHelper.TextField("Instance.ActualAddressTown", {"class" : "BillingInput"}))}

		${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.ActualAddressRegion", 
														"Район:"), 
									FormHelper.TextField("Instance.ActualAddressRegion", {"class" : "BillingInput"}))}
												
		${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.ActualAddressStreet", 
														"Улица:"), 
									FormHelper.TextField("Instance.ActualAddressStreet", {"class" : "BillingInput"}))}
												
		${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.ActualAddressHouse", 
														"Дом:"), 
									FormHelper.TextField("Instance.ActualAddressHouse", {"class" : "BillingInput"}))}
												
		${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.ActualAddressOffice", 
														"Офис:"), 
									FormHelper.TextField("Instance.ActualAddressOffice", {"class" : "BillingInput"}))}
												
		${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.BeforeNamePrefix", 
														"Префикс перед \"Кому\":"), 
									FormHelper.TextField("Instance.BeforeNamePrefix", {"class" : "BillingInput"}))}
												
		${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.AfterNamePrefix", 
														"Надпись после \"Кому\":"), 
									FormHelper.TextField("Instance.AfterNamePrefix", {"class" : "BillingInput"}))}
									
		<tr style="text-align:right">
			<td colspan="2">${FormHelper.Submit("Сохранить")}</td>
		</tr>
	</table>	
	</form>
</div>

<div class="right">

		<div class="UseCaseGroup">
			<div class="InputGroupHeader">
				Отправка корреспонденции
			</div>
			<form method="post" action="SentMail.rails">
				${FormHelper.HiddenField("ClientCode", Client.Id)}
				${FormHelper.HiddenField("MailSentEntity.PayerId", Instance.PayerID)}
				${FormHelper.LabelFor("MailSentEntity.SentDate", "Дата отправки:")}
				<br>
				${FormHelper.TextFieldValue("MailSentEntity.SentDate", Today.ToShortDateString(), { "class" : "CheckDate DateInFuture" })}
				<input type="button" class="CalendarInput" />
				<% if IsDefined("SendMailError"): %>
					<br />
					<span class="ValidationErrorMessage">${SendMailError}</span>
				<% end %>
				<textarea name="MailSentEntity.Comment" rows="3" style="width:100%"></textarea>
				<input type="submit" value="Корреспонденция отправлена" />
			</form>
		</div>
		
		<div class="UseCaseGroup">
			<div class="InputGroupHeader" style="margin-bottom:10px;">
				История отправки корреспонденции
			</div>
			<div>
			<table class="DataTable" style="width: 100%;">
			<% 
			if MailSentHistory.Length > 0:
				i = 0
				for mailSentEntity in MailSentHistory:
					i++
			%>
					<tr id="mail${mailSentEntity.Id}" class="${ViewHelper.GetRowStyle(i)} ${ "DeletedMessage" if mailSentEntity.IsDeleted}">
						<td>
							<% if not mailSentEntity.IsDeleted: %>
							<input type="button" value="Удалить" onclick="return RemoveMailEntity(${mailSentEntity.Id});"/>
							<% end %>
						</td>
						<td>
							${mailSentEntity.SentDate.ToShortDateString()}
						</td>
						<td>
							${mailSentEntity.UserName}
						</td>
						<td>
							${ViewHelper.FormatMessage(mailSentEntity.Comment)}
						</td>
					</tr>
			<% 
				end
			else:
			%>
				<tr>
					<td style="text-align:center;">
						Корреспонденция не отправлялась
					</td>
				</tr>				
			<% end %>
			</table>
			</div>
		</div>
</div>	
<%
def WriteLabelAndEditControle(labelText as string, editControlText as string)	return "<tr><td>" + labelText + "</td><td>" + editControlText + "</td></tr>"
"
end

def WriteInputGroupHeader(localHeader as string):
	return "<tr><td class=\"InputGroupHeader\" colspan=\"2\">" + localHeader + "</td></tr>"
en}def WriteSubmitButton(submitButton as string):
	return "<tr style=\"text-align:right\"><td colspan=\"2\">" + submitButton + "</td></tr>"
"
enddef WriteMessage(message as string):
	return "<div class=\"Message\">" + message + "</div>"
"
endd
%

<style>
	.Main
	{
		width:100%;
		margin: 0;
		padding: 0;
	}
	.Left
	{
		width:57%;
		float:left;
		margin: 0;
		padding: 0;
	}
	.Right
	{
		width:40%;
		float:right;
		margin: 0;
		padding: 0;
	}
</style<form action="update.rails" method="post">
			${FormHelper.HiddenField("ClientCode")}
}
			${FormHelper.HiddenField("Instance.PayerID")>
<%if IsDefined("UpdateMessage"):
	output WriteMessage(UpdateMessage)
	
end	
%>
<%if IsDefined("SendMessage"):
	output WriteMessage(SendMessage)
"
end
%

<div class="Main"<div class="Left">
}
			<table>
					${WriteInputGroupHeader("Общая информация")}

					
					${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.ShortName", 
																	"Краткое наименование:"),												FormHelper.TextField("Instance.ShortName"))}
}
												
					${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.JuridicalName", 
																	"Полное наименование:"),												FormHelper.TextField("Instance.JuridicalName"))}
}
												
					${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.JuridicalAddress",																	"Юридический адресс:"), 
												FormHelper.TextField("Instance.JuridicalAddress"))}
}
												
					${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.KPP", 
																	"КПП:"),												FormHelper.TextField("Instance.KPP"))}
}
											

					${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.INN", 
																	"ИНН:"),												FormHelper.TextField("Instance.INN"))}
										
					${WriteInputGroupHeader("Контактная информация")}
							
					${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.AccountantName", 
																	"Контактное лицо:"), 
												FormHelper.TextField("Instance.AccountantName"))}
}
																${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.AccountantEmail", 
																	"E-mail:"), 
												FormHelper.TextField("Instance.AccountantEmail"))}
}
																${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.AccountantPhone", 
																	"Телефон:"), 
												FormHelper.TextField("Instance.AccountantPhone"))}
}
												
					${WriteInputGroupHeader("Опции выставки счета")}
					
					${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.AutoInvoice", 
																	"Выставлять счет:"), 
												FormHelper.Select("Instance.AutoInvoice", 
																  {1:"Автоматически", 0:"По запросу"},
																  {"value":"Key", "text":"Value"}))}

					${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.DetailInvoice", 
																	"Категория счета:"), 
												FormHelper.Select("Instance.DetailInvoice", 
																  {0:"Стандартный", 1:"Детализированный"},
																  {"value":"Key", "text":"Value"}))}
																  
					${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.PayCycle", 
																	"Периодичность выставления счетов:"), 
												FormHelper.Select("Instance.PayCycle", 
																  {0:"Помесячно", 1:"Поквартально"}, 
																  {"value":"Key", "text":"Value"}))}

					${WriteInputGroupHeader("Доставка корреспонденции")}

					${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.ActualAddressCountry", 
																	"Страна:"),												FormHelper.TextField("Instance.ActualAddressCountry"))}
}
												
					${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.ActualAddressIndex", 
																	"Индекс:"),												FormHelper.TextField("Instance.ActualAddressIndex"))}
}
												
					${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.ActualAddressProvince", 
																	"Область:"),												FormHelper.TextField("Instance.ActualAddressProvince"))}
}
												
					${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.ActualAddressTown", 
																	"Город:"),												FormHelper.TextField("Instance.ActualAddressTown"))}
}
												
					${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.ActualAddressStreet", 
																	"Улица:"),												FormHelper.TextField("Instance.ActualAddressStreet"))}
}
												
					${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.ActualAddressHouse", 
																	"Дом:"),												FormHelper.TextField("Instance.ActualAddressHouse"))}
}
												
					${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.ActualAddressOffice", 
																	"Офис:"),												FormHelper.TextField("Instance.ActualAddressOffice"))}
}
												
					${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.BeforeNamePrefix", 
																	"Префикс перед \"Кому\":"),												FormHelper.TextField("Instance.BeforeNamePrefix"))}
}
												
					${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.AfterNamePrefix", 
																	"Надпись после \"Кому\":"),												FormHelper.TextField("Instance.AfterNamePrefix"))}
}
												

					${WriteInputGroupHeader("Комментарий")}

					${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.Comment", 
																	"Комментарий:"),												FormHelper.TextArea("Instance.Comment", {"cols":"50", "rows":"20"}))}
}
																${WriteSubmitButton(FormHelper.Submit("Обновить"))}
					</table>
				</form>
</div>
	
<%
if IsDefined("ClientMessage"):
%<div class="Right">
				<form action="sendMessage.rails" method="post">
					<input type="hidden" value="${ClientCode}" name="NewClientMessage.ClientCode" />
					<table>
						<tr>
							<td class="InputGroupHeader">
								Сообщение клиенту:
}
							</td						</tr>
>
<%
if IsDefined("SendError"):
%>
	<tr		<td class="ValidationErrorMessage">
			${SendError}
}
		</td>
	</tr>
<%		
endif controller.IsContainsNotShowedMessage():
:
	output "<tr><td class=\"Message\">Остались не показанные сообщения</td></tr>"
end		
%						<tr>
							<td>
								<textarea name="NewClientMessage.Message" rows="20" cols="50"></textarea>
}
							</td						</tr>
						<tr>
							<td>
								Показать
								<select name="NewClientMessage.ShowMessageCount">
									<option>1</option>
									<option>2</option>
									<option>5</option>
									<option>10</option>
								</select>
								раз.
}
							</td						</tr>
						<tr style="text-align:right">
							<td>
								<input type="submit" value="Отправить сообщение" />
}
							</td						</tr>
					</table>
				</form>
				</div>
>
<% 
end 
%>
</d
<% component Bubble, {"bredcrumbs" : []} %>

<% component CaptureFor, {"id" : "Title"}: %>
	Регистрация клиента
<% end %>

${app.Asset("registration.js")}
${app.JS("contact.registrator.js", "payer.search.js")}

<script type="text/javascript">

	function validateSupplier() {
		if ($("#ShowForOneSupplier").prop("checked"))
			return (($("#SupplierComboBox").val() != null) &&
						($("#SupplierComboBox").val().length > 0) &&
						($("#SelectSupplierDiv").css("display") == "block"));
		return true;
	}

	function validatePayer() {
		if ($("#PayerExists").prop("checked"))
			return (($("#PayerComboBox").val() != null) &&
						($("#PayerComboBox").val().length > 0) &&
						($("#SelectPayerDiv").css("display") == "block"));
		return true;
	}

	$(function () {

		viewModel = new RegistrationViewModel();
		viewModel = new RegistrationViewModel();
		ko.applyBindings(viewModel);

		$("#PayerExists").attr({ checked: null, disabled: null });
		$("#ShowForOneSupplier").attr({ checked: null, disabled: null });
		$("#options_FillBillingInfo").attr({ disabled: null });
		$("#SearchPayerDiv").css("display", "none");
		$("#SelectPayerDiv").css("display", "none");
		$("#SearchSupplierDiv").css("display", "none");
		$("#SelectSupplierDiv").css("display", "none");

		$.validator.addMethod("noEmailAddress", function (value, element) {
			if (value.toString().length == 0 && $("#additionalEmails").val().length == 0
				&& $("#SendRegistrationCard").prop("checked")) {
				return false;
			}
			else return true;
		}, "Это поле необходимо заполнить");

		$.validator.addMethod("supplier", function (value, element) {
			return validateSupplier();
		}, "Выберите поставщика");

		$.validator.addMethod("payer", function (value, element) {
			return validatePayer();
		}, "Выберите плательщика");

		$("#options_RegisterEmpty").change(function () {
			if ($(this).prop("checked"))
				$("#user_Name").rules("remove", "required");
			else
				$("#user_Name").rules("add", "required");
		});
	});


	function validateForm() {
		$("form").data("validator").settings.errorPlacement = function (error, element) {
			if (element.attr("name") == "options.ShowForOneSupplier") {
				$("#MessageForSupplier").html(error);
			}
			else if (element.attr("name") == "PayerExists") {
				$("#MessageForPayer").html(error);
			}
			else {
				error.insertAfter(element);
			}
		};
		$("[name=\"clientContacts[0].ContactText\"]").rules("add", { required: true });
		$("[name=\"additionalEmailsForSendingCard\"]").rules("add", { validateEmailList: true });
		$("[name=\"clientContacts[1].ContactText\"]").rules("add", { noEmailAddress: true });
		$("#address_Value").rules("remove", "required");
	}

	function ShowSelectSupplierDiv() {
		var searchText = $("#SearchSupplierTextPattern").val();
		if (searchText.length == 0)
			return;

		var params = { "searchPattern": searchText }

		if ($('#PayerComboBox').val()) {
			var payerId = parseInt($('#PayerComboBox').val());
			if (payerId)
				params.payerId = payerId;
		} else {
			$("#PayerComboBox").data("setSupplierSelection", true);
		}

		$.get("SearchSuppliers",
			params,
			function(htmlOptions) {
				$('#SupplierComboBox').find('option').remove().end();
				if (htmlOptions.length == 0) {
					$("#SearchSupplierTextPattern").attr("disabled", null);
					$("#SearchSupplierButton").attr("disabled", null);
					$("#MessageForSupplier").html("<i>Ничего не найдено</i>");
					return;
			}
			$("#SupplierComboBox").append(htmlOptions);
			ViewDiv(false, "#SearchSupplierDiv");
			ViewDiv(true, "#SelectSupplierDiv");
			$("#MessageForSupplier").html("");
			OnSupplierChange();
		});
		$("#MessageForSupplier").html("<i>Выполняется поиск<i/>");
		$("#SearchSupplierTextPattern").attr("disabled", "disabled");
		$("#SearchSupplierButton").attr("disabled", "disabled");
	}

	function ShowSearchSupplierDiv() {
		resetPayer();
		$('#SupplierComboBox').find('option').remove().end();
		$("#MessageForSupplier").html("");
		$("#SearchSupplierTextPattern").attr("disabled", null);
		$("#SearchSupplierButton").attr("disabled", null);
		ViewDiv(false, '#SelectSupplierDiv');
		ViewDiv(true, "#SearchSupplierDiv");
		LockPayer();
		$("#SearchSupplierTextPattern").focus();
	}

	function ViewDiv(show, selector)
	{
		var displayValue = "none";
		if (show) {
			displayValue = "block";
		}
		jQuery(selector).css("display", displayValue);
	}

	function OnClientViewChanged(selectedValue) {
		ViewDiv(false, "#SearchSupplierDiv");
		ViewDiv(false, "#SelectSupplierDiv");
		if (selectedValue) {
			ShowSearchSupplierDiv();
		}
		else {
			UnlockPayer();
		}
	}

	//если плательщик был выбран в результате выбора поставщика то при отмене выбора
	//поставщика нужно отменить выбор плательщика
	function resetPayer() {
		if ($("#PayerComboBox").data("setSupplierSelection")) {
			$("#PayerComboBox option").remove();
			$("#PayerIdValue").val(null);
			$("#PayerComboBox").remove("setSupplierSelection");
			viewModel.payerId(null);
		}
	}

	function OnSupplierChange(payerName) {
		var payer = $("#SupplierComboBox option:selected").attr("title");
		SetLockedPayer(payer);
		var payerId = parseInt(payer);
		if (payerId) {
			viewModel.payerId(payerId);
			$("#PayerIdValue").val(payerId);
		}
		else {
			viewModel.payerId(null);
		}
	}

	function LockPayer() {
		$("#PayerExists").prop("checked", false);
		$("#PayerExists").click();
		$("#PayerExistsValue").val(true);
		$("#PayerExists").attr("disabled", "disabled");
		$("#options_FillBillingInfo").prop("checked", false);
		$("#options_FillBillingInfo").attr("disabled", "disabled");
		ViewDiv(false, '#SelectPayerDiv');
		ViewDiv(false, "#SearchPayerDiv");
	}

	function SetLockedPayer(payerName) {
		$("#PayerExists").prop("checked", true);
		$("#PayerExistsValue").val(true);
		$("#PayerExists").attr('disabled', 'disabled');
		$("#PayerComboBox").attr('disabled', 'disabled');
		$("#ResetPayerButton").attr('disabled', 'disabled');
		$("#PayerComboBox").html("<option selected>" + payerName + "</option>");
		ViewDiv(true, "#SelectPayerDiv");
	}

	function UnlockPayer() {
		resetPayer();
		$("#PayerExists").removeAttr('checked');
		$("#PayerExistsValue").val(false);
		$("#PayerExists").removeAttr('disabled');
		$("#PayerComboBox").removeAttr('disabled');
		$("#ResetPayerButton").removeAttr('disabled');
		$("#options_FillBillingInfo").removeAttr('checked');
		$("#options_FillBillingInfo").removeAttr('disabled');
		ViewDiv(false, "#SelectPayerDiv");
	}
</script>

<style>
	#client_Name, #client_FullName, #address_Value
	{
		width: 100%;
	}
</style>
<div style="width: 800px;">
${FormHelper.FormTag("${siteroot}/Register/RegisterClient", {@id: @RegistrationForm, @name: @RegistrationForm})}
	<div class="block">
		<h3>Общая информация</h3>
		<table border="0" width="100%" cellpadding="5" cellspacing="0">
			<tr>
				<td>Юридическое наименование:</td>
				<td>
					${app.Edit("client.FullName")}
				</td>
				<td></td>
			</tr>
			<tr>
				<td>Краткое наименование:</td>
				<td>
					${app.Edit("client.Name")}
				</td>
				<td></td>
			</tr>
			<tr valign="top">
				<td colspan="2">
					<div class="contextualNoTopSpace">
						<a id="clientaddPhoneLink" class="icon icon-add" name="2" href="javascript:"
							onclick="addPhone('client')">Добавить</a>
					</div>
					<h4>Телефоны</h4>
					<table id = "clientPhones" cellpadding="0" cellspacing="10" width="100%" border="0">
						<tr>
							<td>
							<table width="100%" cellpadding="0" cellspacing="0" border="0">
							<tr>
								<td width="30%">Номер телефона:</td>
								<td>
									<input type="text" id="ClientContactPhone" name="clientContacts[0].ContactText" value="${clientContacts[0].ContactText}" class="phone" style="width: 100%" />
									<input type="hidden" name="clientContacts[0].Type" value="1" />
								</td>
							</tr>
							<tr>
								<td>Примечание:</td>
								<td><input type="text" name="clientContacts[0].Comment" style="width: 100%" /></td>
							</tr>
							</table>
							</td>
						</tr>
					</table>
				</td>
				<td></td>
			</tr>

			<tr valign="top">
				<td colspan="2">
					<div class="contextualNoTopSpace">
						<a id="clientaddEmailLink" class="icon icon-add" name="500" href="javascript:"
							onclick="addEmail('client')">Добавить</a>
					</div>
					<h4>Email</h4>
					<table id = "clientEmails" cellpadding="0" cellspacing="10" width="100%" border="0">
						<tr>
							<td>
							<table width="100%" cellpadding="0" cellspacing="0" border="0">
							<tr>
								<td width="30%">Email:</td>
								<td>
									<input type="text" id="ClientContactEmail" name="clientContacts[1].ContactText" value="${clientContacts[1].ContactText}" class="email" style="width: 100%" />
									<input type="hidden" name="clientContacts[1].Type" value="0" />
								</td>
							</tr>
							<tr>
								<td>Примечание:</td>
								<td><input type="text" name="clientContacts[1].Comment" style="width: 100%" /></td>
							</tr>
							</table>
							</td>
						</tr>
					</table>
				</td>
				<td></td>
			</tr>
		</table>
	</div>

	${ForHelper.Editor("user.Accounting")}

	<div class="block">
		<h3>Права доступа</h3>
		<div>
			<% for i, permission in enumerate(Permissions): %>
				<input type=checkbox name=permissions[${i}].Id value=${permission.Id} ${"checked" if (permission.AssignDefaultValue)}>
				${permission.Name}
				<br>
			<% end %>
		</div>
	</div>

	<div class="block">
		<h3>Настройка</h3>
		<table cellpadding="1" border="0" width="100%">
			<tr>
				<td colspan="2">
					${app.Edit("client.Settings.IgnoreNewPrices")}
				</td>
			</tr>
			<tr>
				<td colspan="2">
					${app.Edit("client.Settings.IgnoreNewPriceForUser")}
				</td>
			</tr>
			<tr>
				<td colspan="2">
					${app.Edit("client.Settings.IsHiddenFromSupplier", {"data-bind": "checked: isHiddenFromSupplier, enable: isHiddenFromSupplierEnable"})}
				</td>
			</tr>
			<tr>
				<td width="50%">
					<input type="checkbox" id="PayerExists" class="payer" name="PayerExists" onclick="OnPayerExistsChanged(this.checked)">
					Выбрать существующего плательщика
					<input type="hidden" id="PayerExistsValue" name="options.PayerExists" value="false" />
				</td>
				<td>
					<div id="SearchPayerDiv" style="width: 100%; display: none">
						<input type="text" id="SearchPayerTextPattern" name="SearchPayerTextPattern" style="width: 75%" />
						<input type="button" id="SearchPayerButton" name="SearchPayerButton" value="Найти" onclick="ShowSelectPayerDiv()" />
					</div>
					<div id="SelectPayerDiv" style="width: 100%; display: none">
						<select id="PayerComboBox" name="payer.Id" style="width: 75%" data-bind="value: payerId"></select>
						<input type="button" id="ResetPayerButton" name="ResetPayerButton" value="Сброс" onclick="ShowSearchPayerDiv()" />
					</div>
					<div id="MessageForPayer"></div>
					<input type="hidden" id="PayerIdValue" name="existingPayerId" />
				</td>
			</tr>
			<tr>
				<td colspan="2">
					${app.Edit("options.FillBillingInfo")}
				</td>
			</tr>
			<tr>
				<td width="50%">
					<input type="checkbox" id="ShowForOneSupplier" class="supplier" name="options.ShowForOneSupplier" onclick="OnClientViewChanged(this.checked)" data-bind="checked: forSupplier">
					Зарегистрировать скрытую копию для поставщика
				</td>
				<td>
					<div id="SelectSupplierDiv" style="width: 100%; display: none">
						<select name="supplier.Id" id="SupplierComboBox" style="width: 75%" onchange="OnSupplierChange(this.options[this.selectedIndex].title)"></select>
						<input type="button" name="ResetSupplierButton" id="ResetSupplierButton" value="Сброс" onclick="ShowSearchSupplierDiv()" />
					</div>
					<div id="SearchSupplierDiv" style="width: 100%; display: none">
						<input type="text" id="SearchSupplierTextPattern" name="SearchSupplierTextPattern" style="width: 75%" />
						<input type="button" id="SearchSupplierButton" name="SearchSupplierButton" value="Найти" onclick="ShowSelectSupplierDiv()" />
					</div>
					<div id="MessageForSupplier"></div>
				</td>
			</tr>
			<tr>
				<td colspan="2">
					${app.Edit("client.Settings.ServiceClient")}
				</td>
			</tr>
			<tr>
				<td colspan="2">
					${app.Edit("options.ShowRegistrationCard")}
				</td>
			</tr>
			<tr>
				<td colspan="2">
					${app.Edit("options.RegisterEmpty")}
				</td>
			</tr>
			<tr>
				<td colspan="2">
					${app.Edit("options.SendSms")}
				</td>
			</tr>
		</table>
		<fieldset>
			<legend>
				${app.Edit("options.SendRegistrationCard")}
			</legend>
			<br />
			Дополнительные адреса для отправки регистрационной карты:<br />
			<textarea rows="2" cols="60" name="additionalEmailsForSendingCard"
				id="additionalEmails"></textarea>
		</fieldset>
	</div>

	<div class="block">
		<h3>Региональная настройка</h3>
		${app.GetValidationError(client, "MaskRegion")}
		<% OutputSubView("/SubViews/Regions") %>
	</div>

	<div class="block">
		<h3>Адрес доставки</h3>
		<table width="100%">
			<tr>
				<td width="20%">Адрес доставки медикаментов:</td>
				<td width="80%">
					${app.Edit("address.Value")}
				</td>
			</tr>
			<tr data-bind="visible: showOrgsEdit">
				<td>${app.Label("address.LegalEntity")}:</td>
				<td>
					${app.Edit("address.LegalEntity", {@items: client.Orgs(), "data-bind": "options: orgs, optionsText: 'name', optionsValue: 'id'"})}
				</td>
			</tr>
		</table>
		<% OutputSubView("/SubViews/MemoAboutWritingAddresses") %>
	</div>
	<div class="block">
		<h3>Сведения о пользователе</h3>
		<table width="100%">
			<tr>
				<td width="20%">
					${app.Label("user.Name")}:
				</td>
				<td width="50%">
					${app.Edit("user.Name")}
					${app.GetValidationError("user.Name")}
				</td>
				<td></td>
			</tr>

			<% OutputSubView("/SubViews/ContactGroupRegistrator", {@prefix: @user}) %>
		</table>
	</div>

	<div class="save">
		<input type="submit" id="RegisterButton" name="RegisterButton" value="Зарегистрировать" />
	</div>
${FormHelper.EndFormTag()}
</div>

<script>
	//хак будь бдителен, регистрация валидатора происходит здесь
	//тк сначала регистрируются валидаторы которые сгенерировал monorails а затем только собственные
	$(function () {
		validateForm();
	});
</script>
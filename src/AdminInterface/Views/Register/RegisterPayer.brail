${app.Asset("RegisterPayer.js")}

<%
def WriteInputGroupHeader(localHeader as string) as string:
%>
	<tr>
		<td class="InputGroupHeader" colspan="2">
			${localHeader}
		</td>
	</tr>
<%
end

def WriteLabelAndEditControle(labelText as string, editControlText as string) as string:
	%>
	<tr>
		<td style="width: 30%">
			${labelText}
		</td>
		<td class="BillingInput">
			${editControlText}
		</td>
	</tr>
	<%
end
%>

<% component Bubble, {"bredcrumbs" : [("Регистрация плательщика", "")]} %>
<% component CaptureFor, {"id" : "Title"}:%>
	Регистрация плательщика
<% end %>

<h3>
	Регистрация плательщика
</h3>

<form id="PayerInfo" action="registered" method="post">
	<input type="hidden" name="showRegistrationCard" value="${showRegistrationCard}" />
	${FormHelper.HiddenField("Instance.Id")}
	${FormHelper.HiddenField("passwordId")}

<table style="width:800px;">
	${WriteInputGroupHeader("Юридическое лицо")}

					
	${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.Name", "Краткое наименование:"),
								FormHelper.TextField("Instance.Name"))}

	${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.JuridicalName", "Полное наименование:"), 
								FormHelper.TextField("Instance.JuridicalName"))}

	${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.Customer", "Заказчик:"), 
								FormHelper.TextField("Instance.Customer"))}

	${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.JuridicalAddress", "Юридический адрес:"), 
								FormHelper.TextField("Instance.JuridicalAddress"))}

	${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.INN", "ИНН:"), 
								FormHelper.TextField("Instance.INN"))}
												
	${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.KPP", "КПП:"), 
								FormHelper.TextField("Instance.KPP"))}

	<% if payer.Id: %>
	<%
	contactGroupIndex = 0
	component ContactViewer, {"ContactGroups" : Instance.ContactGroupOwner.ContactGroups}:
		section ContactGroupHeader:
		%>
			<tr>
				<% if contactGroupIndex == 0: %>
					<td class="InputGroupHeader">
						<a href="../Contact/NewContactGroup?billingCode=${Instance.Id}" target="_blank">Добавить группу контактной информации</a>
					</td>
					<td class="InputGroupHeader">
						${ContactGroupName}
					</td>
				<% else: %>
					<td class="InputGroupHeader" colspan="2">
						${ContactGroupName}
					</td>
				<% end %>
			</tr>
		<% 
			contactGroupIndex++;
		end
		section Item:
		%>
			<tr>
				<td>
					${Label}:
				</td>
				<td>
					${Value}
				</td>
			</tr>
		<% 
		end
		section Person:
		%>
				<a href='../Contact/EditPerson?personId=${PersonId}' target='_blank'>${PersonName}</a>
		<%
		end
		section ContactGroupHeaderLink:
		%>
				<a href='../Contact/EditContactGroup?contactGroupId=${ContactGroupId}' target="_blank" >${ContactGroupName}</a>
		<%
		end
	end
	%>
	<% end %>

		${WriteInputGroupHeader("Опции выставления счета")}
					
		${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.AutoInvoice", "Выставлять счет:"),
									app.Edit("Instance.AutoInvoice"))}

		${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.PayCycle", "Периодичность выставления счетов:"),
									app.Edit("Instance.PayCycle"))}

		${WriteInputGroupHeader("Доставка корреспонденции")}

		${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.ActualAddressCountry", 
														"Страна:"), 
									FormHelper.TextField("Instance.ActualAddressCountry"))}
												
		${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.ActualAddressIndex", 
														"Индекс:"), 
									FormHelper.TextField("Instance.ActualAddressIndex"))}
												
		${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.ActualAddressProvince", 
														"Область:"), 
									FormHelper.TextField("Instance.ActualAddressProvince"))}
												
		${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.ActualAddressTown", 
														"Город:"), 
									FormHelper.TextField("Instance.ActualAddressTown"))}

		${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.ActualAddressRegion",
														"Район:"), 
									FormHelper.TextField("Instance.ActualAddressRegion"))}
												
		${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.ActualAddressStreet", 
														"Улица:"), 
									FormHelper.TextField("Instance.ActualAddressStreet"))}
												
		${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.ActualAddressHouse", 
														"Дом:"), 
									FormHelper.TextField("Instance.ActualAddressHouse"))}
												
		${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.ActualAddressOffice", 
														"Офис:"), 
									FormHelper.TextField("Instance.ActualAddressOffice"))}
												
		${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.BeforeNamePrefix", 
														"Префикс перед \"Кому\":"), 
									FormHelper.TextField("Instance.BeforeNamePrefix"))}
												
		${WriteLabelAndEditControle(FormHelper.LabelFor("Instance.AfterNamePrefix", 
														"Надпись после \"Кому\":"), 
									FormHelper.TextField("Instance.AfterNamePrefix"))}
									
		${WriteInputGroupHeader("Условия оплаты")}
		
	<tr>
		<td colspan="2">
			<fieldset>
				<% if admin.CanRegisterClientWhoWorkForFree: %>
				<legend>			
					${FormHelper.LabelFor("PaymentOptions.WorkForFree", "Клиент обслуживается бесплатно:")}
					${FormHelper.CheckboxField("PaymentOptions.WorkForFree")}
				</legend>
				<% end %>
				<div>
					${FormHelper.LabelFor("PaymentOptions.PaymentPeriodBeginDate", "Дата начала платного периода:")}
					<br>
					${FormHelper.TextFieldValue("PaymentOptions.PaymentPeriodBeginDate", PaymentOptions.PaymentPeriodBeginDate.ToShortDateString(), { "class" : "CheckDate DateInFuture" })}
					<input type="button" class="CalendarInput" />
				</div>
				<div>
				${FormHelper.LabelFor("PaymentOptions.Comment", "Комментарий:")}
				<br>
				${FormHelper.TextArea("PaymentOptions.Comment", {"rows":"20", "class" : "BillingInput CommentValidator" })}
				</div>
			</fieldset>
		</td>
	</tr>		
	<tr>
		<tr style="text-align:right">
			<td colspan="2">
			${FormHelper.Submit("Сохранить")}
		</td>
	</tr>		
</table>
</form>

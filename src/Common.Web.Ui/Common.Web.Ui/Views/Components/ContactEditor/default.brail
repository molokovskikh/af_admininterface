<script type="text/javascript">

	var contactTypes = $H({	"0" : "E-mail", 
							"1" : "Телефон"
							<% if IsDefined("ShowMailingAddress"): %>
							, "2" : "Почтовый адрес"
							, "3" : "Факс"
							<% end %>});

	function Add()
	{
		newContactCountIndex = $("contacts").select('input[type="hidden"]').size();
				
		select = new Element("select", { "name" : "Contacts[" + newContactCountIndex + "].Type" });
		
		contactTypes.each(function(pair){
			select.insert(new Element("option", { "value" : pair.key }).update(pair.value));
		});
			
		id = new Element("input", { "type" : "hidden", 
									"name" : "Contacts[" + newContactCountIndex + "].Id",
									"value" : "0" } );
		
		deleteButton = new Element("input", { "type" : "button" ,
											  "value" : "Удалить" })
						.observe("click", function (event) { deleteCurrentRow(event.element()); });
		
		text = new Element("input", { "type" : "text",
									  "name" : "Contacts[" + newContactCountIndex + "].ContactText"  } );

		comment = new Element("input", { "type" : "text",
										 "name" : "Contacts[" + newContactCountIndex + "].Comment"  } );
									  
		tr = new Element("tr", { "class" : "Added" } )
			.insert(new Element("td", { "class" : "Line" }).insert(id).insert(deleteButton))
			.insert(new Element("td", { "class" : "Line" }).insert(select))
			.insert(new Element("td", { "class" : "Line" }).insert(text))
			.insert(new Element("td", { "class" : "Line" }).insert(comment));
			
		$$("#contacts tbody").first().insert(tr);
	}
	
	function deleteCurrentRow(obj)
	{
		delRow = obj.parentNode.parentNode;
	
		var table = delRow.parentNode.parentNode;
		var rowIndex = delRow.sectionRowIndex;
		if (table.rows.length - 1 > rowIndex)
			if (table.rows[rowIndex + 1].className == "ContactValidationErrorMessage")
				table.deleteRow(rowIndex + 1);
		table.deleteRow(rowIndex);
		UpdateRowIndexs();
	}
	
	function UpdateRowIndexs()
	{
		table = document.getElementById("contacts");
		for(i = 1; i < table.rows.length; i++)
		{		
			row = table.rows[i];
			if (row.className != "ContactValidationErrorMessage")
			{
				row.cells[1].getElementsByTagName("input").name = "Contacts[" + i - 1  + "].Id";
				row.cells[1].getElementsByTagName("select").name = "Contacts[" + i - 1 + "].Type";
				row.cells[2].getElementsByTagName("input").name = "Contacts[" + i - 1 + "].ContactText";
			}
		}
	}	
</script>
<style>
	.Line
	{
		padding: 3px;
		background-color:#f6f6f6;
		padding:5px;
	}
</style>
<table id="contacts" cellpadding="3px" cellspacing="3px">	
	<tr>
		<td style="background-color:#f6f6f6; padding:5px;" colspan="3">
			<input type="button" value="Добавить контактную информацию" onclick="return Add();" /> 
		</td>
	</tr>
<% 
	contactTypes = {"0" : "E-mail", "1" : "Телефон"}
	contactTypes.Add("2", "Почтовый адрес") if IsDefined("ShowMailingAddress")
	contactTypes.Add("3", "Факс") if IsDefined("ShowMailingAddress")
	
	i = 0
	for contact in Contacts: 
%>
		<tr> 
			<td class="Line">  
				<input type="button" value="Удалить" onclick="return deleteCurrentRow(this);" /> 
			</td> 
			<td class="Line"> 
				${FormHelper.HiddenField("Contacts[${i}].Id", contact.Id)}
				${FormHelper.Select("Contacts[${i}].Type", 
									contact.Type,
									contactTypes,
									BindingHelper.GetDictionaryMapping())}
			</td> 
			<td class="Line"> 
				${FormHelper.TextFieldValue("Contacts[${i}].ContactText", contact.ContactText)}
			</td>
			<td class="Line">
				${FormHelper.TextFieldValue("Contacts[${i}].Comment", contact.Comment)}
			</td>
		</tr>
		<%
			if IsDefined("Invalid"):
				component ValidationErrorViewer, { "instance" : contact }:
					section item:
					%> 
					<tr class="ContactValidationErrorMessage">
						<td colspan="3"> 
							${ValidationError}
						</td>
					</tr>
					<%
					end
				end
			end
		i++
	end
%>
	<tr>
		<td class="Line">  
			<input type="button" value="Удалить" onclick="return deleteCurrentRow(this);" /> 
		</td> 
		<td class="Line"> 
			<input type="hidden" name="Contacts[${i}].Id" />
			${FormHelper.Select("",
								contactTypes,
								BindingHelper.GetDictionaryMapping({"name":"Contacts[${i}].Type"}))}
		</td> 
		<td class="Line"> 
			<input type="text" name="Contacts[${i}].ContactText" />
		</td> 
		<td class="Line"> 
			<input type="text" name="Contacts[${i}].Comment" />
		</td> 
	</tr>
</table>